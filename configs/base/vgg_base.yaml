## overridable via commandline

experiment_name: "VGG_38_cifar100" # str
seed: 7112018
dataset: 
  !DCIFAR100
    download: true

fast_mode: True
gpus: [0]       # list ints
batch_size: 256 # 

model: 
  !MVGG
    input_shape:
      - 4
      - 3
      - 32
      - 32
    num_output_classes: 100
    num_filters: 32
    use_bias: false
    num_stages: 3
    num_blocks_per_stage: 5

optimizer:
  !OAdam
    lr: 0.001
    weight_decay: 0
    amsgrad: false

epochs: 100 # int
scheduler:
  !SCosineAnnealing
    T_max: 100 # MAKE SURE TO SET TO MAX EPOCHS
    eta_min: 0.00002

init_weights: false 
validation_list: 'validation_cifar100_5%.txt' # list ints or name of list in 'lists' folder
freeze_parameter_list: [] # list of regexes which if match a  fully qualified parameter name (i.e. resnet.model.bn_1.weight) have their weights frozen (not updated but calculated)  

transforms:
  - !PPRandomCrop {size: 32, padding: 4} # defined in preprocessing/__init__.py
  - !PPRandomHorizontalFlip {}
  - !PPToTensor {}
  - !PPNormalize {mean: [0.5071, 0.4867, 0.4408], std: [0.2675, 0.2565, 0.2761]}

transforms_test:
  - !PPToTensor {}
  - !PPNormalize {mean: [0.5071, 0.4867, 0.4408], std: [0.2675, 0.2565, 0.2761]}

target_transforms: []
target_transforms_test: []

trackers: # list of enums -> kwarg dict
  - !GradientsTracker {key: "gradients"}  # objects with 'yaml_tag' and inheriting from yaml.YAMLobject, can be instantiated this way!

    
